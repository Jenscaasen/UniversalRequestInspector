@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using UniversalRequestInspector.Models
@using UniversalRequestInspector.Services
@inject RequestStorageService StorageService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable
@rendermode InteractiveServer

<PageTitle>Universal Request Inspector</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">
                <i class="bi bi-search"></i>
                Universal Request Inspector
            </h1>
            <p class="lead">Create a temporary URL endpoint to capture and inspect HTTP requests in real-time.</p>
        </div>
    </div>

    @if (string.IsNullOrEmpty(currentSinkId))
    {
        <div class="row">
            <div class="col-md-8 col-lg-6">
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="card-title">Ready to inspect requests?</h5>
                        <p class="card-text">Click the button below to generate a unique URL that will capture any HTTP request sent to it.</p>
                        <button class="btn btn-primary btn-lg" @onclick="StartNewSink" disabled="@isLoading">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-play-circle me-2"></i>
                            Start Now
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="row mb-4">
            <div class="col-12">
                <div class="card border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0">
                            <i class="bi bi-check-circle me-2"></i>
                            Your Request Sink is Active
                        </h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-8">
                                <label class="form-label fw-bold">Your unique URL:</label>
                                <div class="input-group mb-2">
                                    <input type="text" class="form-control" value="@GetSinkUrl()" readonly id="sinkUrl">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="CopyUrl">
                                        <i class="bi bi-clipboard"></i>
                                        Copy
                                    </button>
                                </div>
                                <small class="text-muted">
                                    Send any HTTP request to this URL or any sub-path (e.g., /api/webhook, /test/path)
                                </small>
                                
                                <!-- Forward URL Configuration -->
                                <div class="mt-3">
                                    <label class="form-label fw-bold">
                                        <i class="bi bi-arrow-right-circle me-1"></i>
                                        Forward URL (optional):
                                    </label>
                                    <div class="input-group">
                                        <input type="url" class="form-control" @bind="forwardUrl"
                                               placeholder="https://example.com/api"
                                               @onkeypress="@(async (e) => { if (e.Key == "Enter") await UpdateForwardUrl(); })">
                                        <button class="btn btn-outline-primary" type="button" @onclick="UpdateForwardUrl" disabled="@isUpdatingForward">
                                            @if (isUpdatingForward)
                                            {
                                                <span class="spinner-border spinner-border-sm me-1"></span>
                                            }
                                            <i class="bi bi-check"></i>
                                            Set
                                        </button>
                                        @if (!string.IsNullOrEmpty(currentForwardUrl))
                                        {
                                            <button class="btn btn-outline-danger" type="button" @onclick="ClearForwardUrl">
                                                <i class="bi bi-x"></i>
                                                Clear
                                            </button>
                                        }
                                    </div>
                                    <small class="text-muted">
                                        @if (!string.IsNullOrEmpty(currentForwardUrl))
                                        {
                                            <span class="text-success">
                                                <i class="bi bi-check-circle me-1"></i>
                                                Forwarding to: @currentForwardUrl
                                            </span>
                                        }
                                        else
                                        {
                                            <span>Requests will only be captured, not forwarded</span>
                                        }
                                    </small>
                                </div>
                            </div>
                            <div class="col-md-4 text-end">
                                <button class="btn btn-danger" @onclick="StopSink">
                                    <i class="bi bi-stop-circle me-2"></i>
                                    Stop Sink
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h4>
                        <i class="bi bi-list-ul me-2"></i>
                        Captured Requests (@requests.Count)
                    </h4>
                    @if (requests.Any())
                    {
                        <button class="btn btn-outline-secondary btn-sm" @onclick="ClearRequests">
                            <i class="bi bi-trash me-1"></i>
                            Clear All
                        </button>
                    }
                </div>

                @if (!requests.Any())
                {
                    <div class="text-center py-5">
                        <i class="bi bi-inbox display-1 text-muted"></i>
                        <h5 class="text-muted mt-3">No requests captured yet</h5>
                        <p class="text-muted">Send a request to your URL to see it appear here in real-time.</p>
                    </div>
                }
                else
                {
                    <div class="requests-container">
                        @foreach (var request in requests.OrderByDescending(r => r.Timestamp))
                        {
                            <RequestDisplay Request="request" />
                        }
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    private HubConnection? hubConnection;
    private string currentSinkId = string.Empty;
    private List<RequestInfo> requests = new();
    private bool isLoading = false;
    private string forwardUrl = string.Empty;
    private string currentForwardUrl = string.Empty;
    private bool isUpdatingForward = false;

    protected override async Task OnInitializedAsync()
    {
        // Initialize SignalR connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/requests"))
            .Build();

        hubConnection.On<RequestInfo>("NewRequest", (request) =>
        {
            requests.Add(request);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task StartNewSink()
    {
        isLoading = true;
        try
        {
            currentSinkId = StorageService.CreateSink(hubConnection?.ConnectionId ?? string.Empty);
            
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("JoinSink", currentSinkId);
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task StopSink()
    {
        if (!string.IsNullOrEmpty(currentSinkId))
        {
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("LeaveSink", currentSinkId);
            }
            
            StorageService.RemoveSink(currentSinkId);
            currentSinkId = string.Empty;
            requests.Clear();
        }
    }

    private void ClearRequests()
    {
        requests.Clear();
    }

    private string GetSinkUrl()
    {
        if (string.IsNullOrEmpty(currentSinkId))
            return string.Empty;
            
        return $"{Navigation.BaseUri}requestsink/{currentSinkId}";
    }

    private async Task CopyUrl()
    {
        await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", GetSinkUrl());
    }

    private async Task UpdateForwardUrl()
    {
        if (string.IsNullOrEmpty(currentSinkId))
            return;

        isUpdatingForward = true;
        try
        {
            var url = string.IsNullOrWhiteSpace(forwardUrl) ? null : forwardUrl.Trim();
            
            using var httpClient = new HttpClient();
            var response = await httpClient.PostAsJsonAsync(
                $"{Navigation.BaseUri}requestsink/{currentSinkId}/api/forward-url",
                new { ForwardUrl = url });

            if (response.IsSuccessStatusCode)
            {
                currentForwardUrl = url ?? string.Empty;
                forwardUrl = currentForwardUrl;
            }
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Failed to update forward URL: {ex.Message}");
        }
        finally
        {
            isUpdatingForward = false;
        }
    }

    private async Task ClearForwardUrl()
    {
        forwardUrl = string.Empty;
        await UpdateForwardUrl();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}

<style>
    .requests-container {
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .card {
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .card-header {
        border-bottom: 1px solid rgba(0, 0, 0, 0.125);
    }
</style>
